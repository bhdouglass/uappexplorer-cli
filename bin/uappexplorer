#!/usr/bin/env node

var parseArgs = require('minimist');
var colors = require('colors');
var Table = require('cli-table3');

var Api = require('../api');
var sorts = require('../constants/sorts');
var types = require('../constants/types');
var pkg = require('../package.json');

var api = new Api();

var argv = parseArgs(process.argv.slice(2), {
    string: ['search', 'app'],
    boolean: ['help', 'ids', 'version'],
    default: {
        page: 1,
        size: api.DEFAULT_LIMIT,
        //sort: api.DEFAULT_SORT, //Don't set this here so we can detect when it's left undefined
        type: api.DEFAULT_TYPE,
        ids: false,
        help: false,
        version: false,
    },
    alias: {
        search: 's',
        page: 'p',
        size: 'limit',
        app: 'a',
        ids: 'i',
        help: 'h',
        version: 'v',
    }
});

//TODO move to another file
var typeColors = {
    application: colors.blue('App'),
    scope: colors.yellow('Scope'),
    webapp: colors.cyan('Web App'),
    snappy: colors.magenta('Snap'),
    snappy_oem: colors.magenta('OEM Snap'),
    snappy_os: colors.magenta('OS Snap'),
    snappy_kernel: colors.magenta('Kernel Snap'),
    snappy_gadget: colors.magenta('Gadget Snap'),
    snappy_framework: colors.magenta('Framework Snap'),
    snappy_application: colors.magenta('Snap'),
};

function listTypes(types) {
    var typeList = '';
    types.forEach(function(type, index) {
        if (index > 0) {
            typeList += ', ';
        }

        typeList += typeColors[type];
    });

    return typeList;
}

if (argv.help) {
    console.log('uappexplorer-cli (v' + pkg.version + ')');
    console.log('usage: uappexplorer [--search <term>] [--page <page>] [--size <size>] [--sort <sort>] [--type <type>]');
    console.log('usage: uappexplorer --app <id>');

    console.log('\nArguments');
    console.log('  Search');
    console.log('    -s --search   Search for the specified term(s) (optional)');
    console.log('    -p --page     What page of the search to show (optional)');
    console.log('       --size     Limit the size of the page (optional)');
    console.log('       --sort     Sort the results (ex: title, hearts, -stars, etc) (optional)');
    console.log('       --type     Filter the results by app type (ex: app, scope, snap, snap_kernel, etc) (optional)');
    console.log('    -i --ids      Also show the ids of the apps (used for finding more info about an app) (optional)');

    console.log('\n  Apps');
    console.log('    -a --app      The id for an app to find');

    console.log('\n  Other');
    console.log('    -h --help     Display this help text');
    console.log('    -v --version  Display the version');

    console.log('\nExample Usage');
    console.log('  Search for telegram related apps: uappexplorer --search telegram');
    console.log('  Find the highest rated scopes: uappexplorer --sort hearts --type scope');
    console.log('  Find the highest rated scopes (page 2): uappexplorer --sort hearts --type scope --page 2');
    console.log('  Show detailed info about an app: uappexplorer --app uappexplorer.bhdouglass');
}
else if (argv.version) {
    console.log('uappexplorer-cli (v' + pkg.version + ')');
}
else if (argv.app) {
    api.app(argv.app).then(function(res) {
        if (res.data && res.data.data) {
            var app = res.data.data;
            console.log(colors.underline(app.title) + ' ' + listTypes(app.types));

            var stars = app.bayesian_average ? app.bayesian_average.toFixed(2) : 0;
            var hearts = app.points ? app.points : 0;
            console.log(colors.red(hearts + '❤ ') + colors.yellow(stars + '★'));

            if (app.prices) {
                var prices = '';

                for (var currency in app.prices) {
                    var price = app.prices[currency];
                    if (price === 0) {
                        prices = 'Free';
                    }
                    else {
                        if (currency == 'USD') {
                            prices += '$' + price + ' ';
                        }
                        else if (currency == 'GBP') {
                            prices += '£' + price + ' ';
                        }
                        else if (currency == 'EUR') {
                            prices += '€' + price + ' ';
                        }
                        else {
                            prices += currency + ' ' + price + ' ';
                        }
                    }
                }

                console.log(colors.green(prices));
            }
            else {
                console.log(colors.green('Free'));
            }

            if (app.author) {
                console.log('Author: ' + app.author);
            }

            if (app.company) {
                console.log('Company: ' + app.company);
            }

            console.log('\n' + app.description);

            if (app.changelog) {
                console.log('\nChangelog:\n' + app.changelog + '\n');
            }

            if (app.permissions) {
                var permissions = app.permissions.join(', ');
                permissions = permissions.replace(/_/g, ' ').replace(/-/g, ' ').replace(/\w\S*/g, function(txt) {
                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); //To title Case
                });

                console.log('Permissions: ' + permissions);
            }

            if (app.support) {
                console.log('Support: ' + app.support);
            }

            if (app.website) {
                console.log('Website: ' + app.website);
            }

            console.log('Version: ' + app.version);
            console.log('License: ' + app.license);
            console.log('Architectures: ' + app.architecture.join(', '));
        }
        else {
            console.warn('No app was found');
        }
    }).catch(function(err) {
        if (err.response && err.response.status == 404) {
            console.warn('App not found');
        }
        else {
            var message = err.response ? err.response.status : err;
            console.warn('Error fetching app: ' + message);
        }
    });
}
else {
    //TODO add column for app ID
    var width = process.stdout.columns - 20 - 15 - 6 - 6 - 6; //last 6 is column separators
    var description = argv.ids ? 'ID' : 'Description';

    var table = new Table({
        head: ['App', description, 'Type', '❤', '★'],
        colWidths: [20, width, 15, 6, 6],
    });

    var skip = (argv.page - 1) * argv.size;
    var sort = api.DEFAULT_SORT;
    var type = api.DEFAULT_TYPE;

    if (!argv.search) {
        //If no search default to sort by newest, like the website
        sort = 'published_date';
    }

    if (sorts.sorts.indexOf(argv.sort) > -1) {
        sort = argv.sort;
    }
    else if (sorts.alias[argv.sort]) {
        sort = sorts.alias[argv.sort];
    }

    //Reverse the sort, as it would be expeted that a - means sort from top to bottom
    if (sort != 'relevance') {
        if (sort.substring(0, 1) == '-') {
            sort = sort.substring(1);
        }
        else {
            sort = '-' + sort;
        }
    }

    if (types.types.indexOf(argv.type) > -1) {
        type = argv.type;
    }
    else if (types.alias[argv.type]) {
        type = types.alias[argv.type];
    }

    var query = {types: type};
    api.search(argv.search, skip, argv.size, sort, true, query).then(function(res) {
        if (res.data && res.data.data && res.data.data.apps) {
            res.data.data.apps.forEach(function(app) {
                table.push([
                    app.title,
                    argv.ids ? app.name : app.short_description,
                    listTypes(app.types),
                    app.points ? app.points : 0,
                    app.bayesian_average ? app.bayesian_average.toFixed(2) : 0,
                ]);
            });

            console.log(table.toString());

            if (argv.size < res.data.data.count) {
                var pages = Math.ceil(res.data.data.count / argv.size);
                console.log('Page ' + argv.page + ' of ' + pages);
            }
        }
        else {
            console.warn('No apps found');
        }
    }).catch(function(err) {
        var message = err.response ? err.response.status : err;
        console.warn('Error fetching app list: ' + message);
    });
}
